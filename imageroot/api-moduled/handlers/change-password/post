#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import agent
import subprocess

from agent.ldapproxy import Ldapproxy
from agent.ldapclient import Ldapclient

request = json.load(sys.stdin)

odomain = Ldapproxy().get_domain(os.environ["LDAP_DOMAIN"])

oldapcli = Ldapclient.factory(**odomain)

try:
    ouser = oldapcli.get_user_entry(os.environ["JWT_ID"])
except agent.ldapclient.exceptions.LdapclientEntryNotFound:
    json.dump({"status": "failure", "message": "user_not_found"}, fp=sys.stdout)
    sys.exit(0)

oldapcli.ldapconn.unbind() # close LDAP connection FD

# First attempt: try to change the password with simple bind, using the
# user's credentials
proc_lpasswd = subprocess.run(["podman", "exec", "-i", "openldap",
    "ldappasswd", "-e", "ppolicy", "-S", "-W", "-E", "-x", "-D", ouser["dn"]],
    input=request["current_password"] + "\n" + request["new_password"] + "\n"  + request["new_password"] + "\n",
    text=True, capture_output=True)

if proc_lpasswd.returncode == 49 and "Password expired" in proc_lpasswd.stderr:
    print(agent.SD_WARNING + f"User {os.environ['JWT_ID']} is changing their expired password", file=sys.stderr)
    # Second attempt: use SASL EXTERNAL authentication to get admin
    # privileges and work around the expired password bind error. As
    # admins have ACL "write" permission on userPassword field, the
    # password quality checks are still applied:
    proc_lpasswd = subprocess.run(["podman", "exec", "-i", "openldap",
        "ldappasswd", "-e", "ppolicy", "-T", "/dev/stdin", ouser["dn"]],
        input=request["new_password"], text=True, capture_output=True)

# Log the last command output: it might contain troubleshoot information!
print(proc_lpasswd.stdout, file=sys.stderr)

if proc_lpasswd.returncode == 0:
    json.dump({"status": "success", "message": "password_changed"}, fp=sys.stdout)
else:
    # Combined output
    lmessage = proc_lpasswd.stdout + proc_lpasswd.stderr

    if proc_lpasswd.returncode == 49:
        emessage = "error_invalid_credentials"
    elif '(Password fails quality checks)' in lmessage:
        emessage = "error_password_complexity"
    elif '(Password is too short for policy)' in lmessage:
        emessage = "error_password_length"
    elif '(New password is in list of old passwords)' in lmessage:
        emessage = "error_password_history"
    elif 'Password has been changed too recently)' in lmessage:
        emessage = "error_password_minimum_age"
    else:
        emessage = "error_unknown"
        # Log the combined output: it might contain troubleshoot information!
        print("ldappasswd:", lmessage, file=sys.stderr)

    json.dump({"status": "failure", "message": emessage}, fp=sys.stdout)
